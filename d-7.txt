monotonic stack
 stack means last in first out 
push operation: adding to the stack 
pop:deleting top element
peek:returns the top element in stack

next greater element:
code:
def nextGreater element(s):
arra list:
arra having fixed size we can't increase or decrease the size
if aara size is 5 we can store 5 elements at max if we want to add 6th element we have to create one more arra with extra space but we can't increse the size
but in arra list the size will be dnamic ou can increase or decrease the size 
list is an interface the angular braces are generics and arralist belongs to collection frame work and we have to use wraper class in collections followed b arralist name . the arralist which we were mentioned in the sntax is a class
interface contains incomplete methods and class contains complete methods 
as arralist is a class we have to import arralist class
import java.util.*;
class Main {
    public static void main(String[] args) {
        List <Integer> Leaders = new ArrayList<>();
        int[] arr = {5,6,2,8,2,6};
        int max = Integer.MIN_VALUE;
        for(int i = arr.length-1;i>=0;i--){
            if (arr[i] > max){
                Leaders.add(arr[i]);
                max = arr[i];
            }
        }
        Collections.reverse(Leaders);
        System.out.println(Leaders);
    }
}

in arra list lets take the arra was initialized with size 2 and we are tring to add 3rd element the size of the list will be doubled and size of arra is four if ou are tring to add 5th element the size will be doubled to 8 and vice versa if a arrab size is 8 . if we removed four elements out of 8 it'll decrese it's size while tring to remove 5th element 


greed algorithm 
custom sorting----
if it's sorting we have onl two possibilites either ascending or descending and when it comes to custom sorting we can sort the nvalues according to our format
sorting number based on unit place 37-26-19
sorted- 26-37-19


or greedy algo steps
    // 1.from given array we have to make pairs for start and end.
       2.Sort the array based on end time.
       3.After sorting for sure we will take first meeting.
       4.Compare end time to the starting time of next pair. If starting time is strictly greater consider the meeting.

